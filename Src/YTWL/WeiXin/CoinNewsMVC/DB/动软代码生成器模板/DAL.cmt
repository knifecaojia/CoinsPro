<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".cs" #>
<#
	TableHost host = (TableHost)(Host);		
	string ModelSpace = host.GetModelClass(host.TableName);
	ColumnInfo identityKey=host.IdentityKey;
	string returnValue = "void";
    if (identityKey!=null)
    {         
         returnValue = CodeCommon.DbTypeToCS(identityKey.TypeName);              
    }
#>
using NHibernate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Domain;
using System.Linq.Expressions;
using NHibernate.Criterion;
using DAO.IDAL;
namespace <#= host.NameSpace #>.DAL <# if( host.Folder.Length > 0){ #>.<#= host.Folder #><# } #>
{
	/// <summary>
	/// 接口层<#= host.GetDALClass(host.TableName) #>
	/// </summary>
	public class D_<#= host.TableName #>:I<#= host.TableName #>
	{
	    private ISessionFactory sessionFactory = ManagerPage.SessionFactory;
		#region  成员方法
		/// <summary>
		/// 是否存在该记录
		/// </summary>
		public bool Exists(object id)
		{
			using (ISession session = sessionFactory.OpenSession())
            {
                return Get(id) != null;
            }
		}
		/// <summary>
		/// 增加一条数据
		/// </summary>
		public object  Save(<#= ModelSpace #> model)
		{
			using (ISession session = sessionFactory.OpenSession())
            {
                var id = session.Save(model);
                session.Flush();
                return id;
            }
		}
		/// <summary>
		/// 更新一条数据
		/// </summary>
		public void Update(<#= ModelSpace #> model)
		{
			using (var session = sessionFactory.OpenSession())
            {
                session.SaveOrUpdate(model);
                session.Flush();
            }
		}
		/// <summary>
		/// 删除数据
		/// </summary>
		public void Delete(object id)
		{
			using (var session = sessionFactory.OpenSession())
            {
                var model = session.Load<<#= ModelSpace #>>(id);
                session.Delete(model);
                session.Flush();
            }
		}

		/// <summary>
		/// 删除数据
		/// </summary>
		public void Delete(<#= ModelSpace #> model)
		{
			using (var session = sessionFactory.OpenSession())
            {
                session.Delete(model);

                session.Flush();
            }
		}

		/// <summary>
		/// 得到一个对象实体
		/// </summary>
		public <#= ModelSpace #> Get(object id)
		{
			using (ISession session = sessionFactory.OpenSession())
            {
                return session.Get<<#= host.TableName #>>(id);
            }
		}
		
		/// <summary>
		/// 获得数据列表
		/// </summary>
		public IList<<#= ModelSpace #>> LoadAll()
		{
			using (ISession session = sessionFactory.OpenSession())
            {
                return session.QueryOver<<#= host.TableName #>>().List();
            }
		}
		/// <summary>
		/// 获得前几行数据
		/// </summary>
		public IList<<#= ModelSpace #>>  GetList(List<SearchTemplate> st, List<Order> order)
		{
			using (ISession session = sessionFactory.OpenSession())
            {
                ICriteria crit = session.CreateCriteria(typeof(<#= host.TableName #>));
                IList<<#= host.TableName #>> customers = ManagerPage.GetCrit<<#= host.TableName #>>(st, order, crit);
                return customers;
            }
		}
		
		/// <summary>
        /// 获取总行数
        /// </summary>
        /// <param name="parent_id"></param>
        /// <returns></returns>
        public int GetCount(List<SearchTemplate> st)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                ICriteria crit = session.CreateCriteria(typeof(<#= host.TableName #>));
                int count = ManagerPage.GetCrit<Navigation>(st, crit);
                return count;
            }
        }
		#endregion  成员方法
	} 
}